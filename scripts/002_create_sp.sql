-- PRODUCT'S STORED PROCEDURES
-- SPXXX : SP_CREATE_PRODUCT

CREATE OR ALTER PROCEDURE SP_CREATE_PRODUCT
	@ID_USER INT,
	@NAME NVARCHAR(100),
	@PRICE DECIMAL(10,2),
	@MIN_STOCK SMALLINT,
	@ID_RETURN INT OUTPUT,
	@ERROR_ID INT OUTPUT,
	@ERROR_DESCRIPTION VARCHAR(MAX) OUTPUT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
		IF(@PRICE < 0 OR @MIN_STOCK < 0)
		BEGIN
			SET @ID_RETURN = -1;
			SET @ERROR_ID = 1;
			SET @ERROR_DESCRIPTION = 'WRONG_DATA'
			ROLLBACK TRANSACTION;
			RETURN;
		END
		IF NOT EXISTS (SELECT 1 FROM [USER] WHERE ID_USER = @ID_USER)
		BEGIN
			SET @ID_RETURN = -1;
			SET @ERROR_ID = 2;
			SET @ERROR_DESCRIPTION = 'USER_NOT_FOUND'
			ROLLBACK TRANSACTION;
			RETURN;
		END

		INSERT INTO [PRODUCT] ([NAME], PRICE, MIN_STOCK, ID_USER, UPDATED_AT, IS_ACTIVE)
			VALUES (@NAME, @PRICE, @MIN_STOCK, @ID_USER, GETUTCDATE(), 1);

        SET @ID_RETURN = SCOPE_IDENTITY();

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_DESCRIPTION = NULL;

	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_DESCRIPTION = 'ERROR_SQL';
	END CATCH
END;   
GO

-- SPXXX : SP_UPDATE_PRODUCT

CREATE OR ALTER PROCEDURE SP_UPDATE_PRODUCT
	@ID_USER INT,
	@ID_PRODUCT INT,
	@NAME NVARCHAR(100),
	@PRICE DECIMAL(10,2),
	@MIN_STOCK SMALLINT,
	@ERROR_ID INT OUTPUT,
	@ERROR_DESCRIPTION VARCHAR(MAX) OUTPUT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
		IF(@PRICE < 0 OR @MIN_STOCK < 0 OR @NAME = '')
		BEGIN
			SET @ERROR_ID = 1;
			SET @ERROR_DESCRIPTION = 'WRONG_DATA'
			ROLLBACK TRANSACTION;
			RETURN;
		END
		IF NOT EXISTS (SELECT 1 FROM [dbo].[PRODUCT] WHERE ID_PRODUCT = @ID_PRODUCT AND ID_USER = @ID_USER)
		BEGIN
			SET @ERROR_ID = 3;
			SET @ERROR_DESCRIPTION = 'PRODUCT_NOT_FOUND'
			ROLLBACK TRANSACTION;
			RETURN;
		END

		UPDATE [PRODUCT]
		SET [NAME] = @NAME, PRICE = @PRICE, MIN_STOCK = @MIN_STOCK, UPDATED_AT = GETUTCDATE()
		WHERE ID_PRODUCT = @ID_PRODUCT

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_DESCRIPTION = NULL;

	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_DESCRIPTION = 'ERROR_SQL';
	END CATCH
END;
GO

-- SPXXX : SP_GET_ACTIVE_PRODUCTS

CREATE OR ALTER PROCEDURE SP_GET_ACTIVE_PRODUCTS
	@ID_USER INT,
	@ERROR_ID INT OUTPUT,
	@ERROR_DESCRIPTION VARCHAR(MAX) OUTPUT
AS
BEGIN
	BEGIN TRY
		IF NOT EXISTS (SELECT 1 FROM [dbo].[USER] WHERE  ID_USER = @ID_USER)
		BEGIN
			SET @ERROR_ID = 2;
			SET @ERROR_DESCRIPTION = 'USER_NOT_FOUND'
			RETURN;
		END

		SELECT [ID_PRODUCT], [NAME], [STOCK], [PRICE], [MIN_STOCK]
		FROM [dbo].[PRODUCT]
		WHERE ID_USER = @ID_USER AND IS_ACTIVE = 1

        SET @ERROR_ID = NULL;
        SET @ERROR_DESCRIPTION = NULL;

	END TRY
	BEGIN CATCH
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_DESCRIPTION = 'ERROR_SQL';
	END CATCH
END;
GO

-- SPXXX : SP_DEACTIVE_PRODUCT

CREATE OR ALTER PROCEDURE SP_DEACTIVATE_PRODUCT
	@ID_USER INT,
	@ID_PRODUCT INT,
	@ERROR_ID INT OUTPUT,
	@ERROR_DESCRIPTION VARCHAR(MAX) OUTPUT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION

		IF NOT EXISTS(SELECT 1 FROM [PRODUCT] WHERE @ID_PRODUCT = ID_PRODUCT AND @ID_USER= ID_USER AND IS_ACTIVE = 1)
		BEGIN
			SET @ERROR_ID = 3;
			SET @ERROR_DESCRIPTION = 'PRODUCT_NOT_FOUND'
			ROLLBACK TRANSACTION;
			RETURN;
		END

		UPDATE [PRODUCT]
		SET IS_ACTIVE = 0
		WHERE ID_PRODUCT = @ID_PRODUCT AND IS_ACTIVE = 1 AND ID_USER = @ID_USER

		SET @ERROR_ID = NULL;
        SET @ERROR_DESCRIPTION = NULL;

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_DESCRIPTION = 'ERROR_SQL';
	END CATCH
END;
GO

-- SPXXX : SP_INCREASE_PRODUCT_STOCK

CREATE OR ALTER PROCEDURE SP_INCREASE_PRODUCT_STOCK
	@ID_USER INT,
	@ID_PRODUCT INT,
	@QUANTITY INT,
	@ERROR_ID INT OUTPUT,
	@ERROR_DESCRIPTION VARCHAR(MAX) OUTPUT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
		IF (@QUANTITY < 0)
		BEGIN
			SET @ERROR_ID = 4;
			SET @ERROR_DESCRIPTION = 'WRONG_DATA'
			ROLLBACK TRANSACTION;
			RETURN;
		END
		IF NOT EXISTS(SELECT 1 FROM [PRODUCT] WHERE @ID_PRODUCT = ID_PRODUCT AND @ID_USER= ID_USER AND IS_ACTIVE = 1)
		BEGIN
			SET @ERROR_ID = 3;
			SET @ERROR_DESCRIPTION = 'PRODUCT_NOT_FOUND'
			ROLLBACK TRANSACTION;
			RETURN;
		END

		UPDATE [PRODUCT]
		SET STOCK = (STOCK + @QUANTITY)
		WHERE ID_PRODUCT = @ID_PRODUCT AND IS_ACTIVE = 1 AND ID_USER = @ID_USER

		SET @ERROR_ID = NULL;
        SET @ERROR_DESCRIPTION = NULL;

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_DESCRIPTION = 'ERROR_SQL';
	END CATCH
END;
GO

-- SPXXX : SP_CREATE_USER

CREATE OR ALTER PROCEDURE SP_CREATE_USER
	@NAME NVARCHAR(100),
	@EMAIL NVARCHAR(150),
	@PASSWORD NVARCHAR(255),
	@CURRENCY_CODE CHAR(3),
	@LANG_CODE CHAR(2),
	@ID_TIME_ZONE TINYINT,
	@ERROR_ID INT OUTPUT,
	@ERROR_DESCRIPTION VARCHAR(MAX) OUTPUT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
		IF EXISTS( SELECT 1 FROM [USER] WHERE EMAIL = @EMAIL)
		BEGIN
			SET @ERROR_ID = 5;
			SET @ERROR_DESCRIPTION = 'EMAIL_ALREADY_EXISTS';
			ROLLBACK TRANSACTION;
			RETURN;
		END

		IF(LEN(@CURRENCY_CODE) <> 3 OR LEN(@LANG_CODE) <>2)
		BEGIN
			SET @ERROR_ID = 4;
			SET @ERROR_DESCRIPTION = 'WRONG_DATA';
			ROLLBACK TRANSACTION;
			RETURN;
		END

		IF NOT EXISTS(SELECT 1 FROM TIME_ZONE_CONFIG WHERE ID_TIME_ZONE_CONFIG = @ID_TIME_ZONE)
		BEGIN
			SET @ERROR_ID = 6;
			SET @ERROR_DESCRIPTION = 'TIMEZONE_NOT_FOUND';
			ROLLBACK TRANSACTION;
			RETURN;
		END

		INSERT INTO [USER] ([NAME], [EMAIL], [PASSWORD], CURRENCY_CODE, LANG_CODE, ID_TIME_ZONE_CONFIG)
			VALUES (@NAME, @EMAIL, @PASSWORD, @CURRENCY_CODE, @LANG_CODE, @ID_TIME_ZONE);

		SET @ERROR_ID = NULL;
        SET @ERROR_DESCRIPTION = NULL;

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_DESCRIPTION = 'ERROR_SQL';
	END CATCH

END;
GO

-- SPXXX : SP_LOGIN_USER

CREATE OR ALTER PROCEDURE SP_LOGIN_USER
	@EMAIL VARCHAR(150),
	@PASSWORD NVARCHAR(255),
	@ERROR_ID INT OUTPUT,
	@ERROR_DESCRIPTION VARCHAR(MAX) OUTPUT
AS
BEGIN
	BEGIN TRY
		IF NOT EXISTS(SELECT 1 FROM [USER] WHERE EMAIL = @EMAIL AND [PASSWORD] = @PASSWORD)
		BEGIN 
		-- ERROR
			SET @ERROR_ID = 7;
			SET @ERROR_DESCRIPTION = 'INVALID_CREDENTIALS';
			RETURN;
		END

		SELECT ID_USER,
			[NAME],
			LANG_CODE,
			CURRENCY_CODE,
			TZC.UTC_OFFSET
		FROM [USER] U
		INNER JOIN TIME_ZONE_CONFIG TZC ON TZC.ID_TIME_ZONE_CONFIG = U.ID_TIME_ZONE_CONFIG
		WHERE U.EMAIL = @EMAIL AND U.[PASSWORD] = @PASSWORD

		SET @ERROR_ID = NULL;
		SET @ERROR_DESCRIPTION = NULL;
	END TRY
	BEGIN CATCH
		SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_DESCRIPTION = 'ERROR_SQL';
	END CATCH
END;
GO

-- SPXXX : SP_UPDATE_USER_PROFILE

CREATE OR ALTER PROCEDURE SP_UPDATE_USER
	@ID_USER INT,
	@NAME NVARCHAR(100),
	@CURRENCY_CODE CHAR(3),
	@LANG_CODE CHAR(2),
	@ID_TIME_ZONE TINYINT,
	@ERROR_ID INT OUTPUT,
	@ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
		IF NOT EXISTS(SELECT 1 FROM [USER] WHERE ID_USER = @ID_USER)
		BEGIN
				SET @ERROR_ID = 2;
				SET @ERROR_DESCRIPTION = 'USER_NOT_FOUND'
				ROLLBACK TRANSACTION;
				RETURN;
		END

		IF (LEN(@CURRENCY_CODE) <> 3) OR (LEN(@LANG_CODE) <> 2)
		BEGIN
				SET @ERROR_ID = 4;
				SET @ERROR_DESCRIPTION = 'WRONG_DATA'
				ROLLBACK TRANSACTION;
				RETURN;
		END

		IF NOT EXISTS (SELECT 1 FROM TIME_ZONE_CONFIG WHERE ID_TIME_ZONE_CONFIG = @ID_TIME_ZONE)
		BEGIN
				SET @ERROR_ID = 4;
				SET @ERROR_DESCRIPTION = 'WRONG_DATA'
				ROLLBACK TRANSACTION;
				RETURN;
		END

		UPDATE [USER]
		SET [NAME] = @NAME, CURRENCY_CODE = @CURRENCY_CODE, LANG_CODE = @LANG_CODE, ID_TIME_ZONE_CONFIG = @ID_TIME_ZONE
		WHERE ID_USER = @ID_USER


		SET @ERROR_ID = NULL;
        SET @ERROR_DESCRIPTION = NULL;

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_DESCRIPTION = 'ERROR_SQL';
	END CATCH
END;
GO

-- SPXXX : SP_GET_TIME_ZONES

CREATE OR ALTER PROCEDURE SP_GET_TIME_ZONES
	@ERROR_ID INT OUTPUT,
	@ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS 
BEGIN
	BEGIN TRY
	
		SELECT 
			ID_TIME_ZONE_CONFIG,
			COUNTRY,
			TIME_ZONE
		FROM
			TIME_ZONE_CONFIG;

		SET @ERROR_ID = NULL;
		SET @ERROR_DESCRIPTION = NULL;
	END TRY
	BEGIN CATCH
		SET @ERROR_ID = ERROR_NUMBER();
		SET @ERROR_DESCRIPTION = 'ERROR_SQL';
	END CATCH
END;
GO

-- SPXXX : SP_CREATE_TRANSACTION

CREATE OR ALTER PROCEDURE SP_CREATE_TRANSACTION
	@ID_USER INT,
    @TYPE CHAR(2),
    @AMOUNT DECIMAL(10, 2),
    @DESCRIPTION NVARCHAR(100),
	@ERROR_ID INT OUTPUT,
	@ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS 
BEGIN

	BEGIN TRY
		BEGIN TRANSACTION


			IF NOT EXISTS(SELECT 1 FROM [USER] WHERE ID_USER = @ID_USER)
			BEGIN
				SET @ERROR_ID = 2;
				SET @ERROR_DESCRIPTION = 'USER_NOT_FOUND';
				ROLLBACK TRANSACTION;
				RETURN;
			END

			IF @TYPE NOT IN ('In','Ex')
			BEGIN 
				SET @ERROR_ID = 3;
				SET @ERROR_DESCRIPTION = 'INVALID_TYPE';
				ROLLBACK TRANSACTION;
				RETURN;
			END

			IF @AMOUNT <= 0
			BEGIN
					SET @ERROR_ID = 4;
					SET @ERROR_DESCRIPTION = 'INVALID_AMOUNT';
					ROLLBACK TRANSACTION;
					RETURN;
			END

		INSERT INTO [TRANSACTION] (TYPE, DATE, AMOUNT, DESCRIPTION, ID_USER) 
		VALUES (@TYPE, GETUTCDATE(), @AMOUNT, @DESCRIPTION, @ID_USER)

		COMMIT TRANSACTION;
		SET @ERROR_ID = NULL;
		SET @ERROR_DESCRIPTION = NULL;

	END TRY
	BEGIN CATCH
	ROLLBACK TRANSACTION;
		SET @ERROR_ID = ERROR_NUMBER();
		SET @ERROR_DESCRIPTION = 'ERROR_SQL';
	END CATCH
END;
GO

-- SPXXX : SP_CREATE_SALE

CREATE OR ALTER PROCEDURE SP_CREATE_SALE
    @ID_USER INT,
    @SALE_DETAILS SALE_DETAIL_TYPE READONLY,
    @ERROR_ID INT OUTPUT,
    @ERROR_DESCRIPTION VARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        -- Validate user exists
        IF NOT EXISTS (SELECT 1 FROM [USER] WHERE ID_USER = @ID_USER)
        BEGIN
            SET @ERROR_ID = 1;
            SET @ERROR_DESCRIPTION = 'USER_NOT_FOUND';
            ROLLBACK TRANSACTION;
            RETURN;
        END

        -- Validate product ownership, quantity, price
        IF EXISTS (SELECT 1 FROM @SALE_DETAILS D LEFT JOIN PRODUCT P ON D.ID_PRODUCT = P.ID_PRODUCT WHERE P.ID_USER <> @ID_USER OR D.QUANTITY <= 0 OR P.PRICE < 0)
        BEGIN
            SET @ERROR_ID = 2;
            SET @ERROR_DESCRIPTION = 'PRODUCT_NOT_FOUND';
            ROLLBACK TRANSACTION;
            RETURN;
        END

        -- Validate sufficient stock
        IF EXISTS (SELECT 1 FROM @SALE_DETAILS D JOIN PRODUCT P ON D.ID_PRODUCT = P.ID_PRODUCT WHERE P.ID_USER = @ID_USER AND P.STOCK < D.QUANTITY)
        BEGIN
            SET @ERROR_ID = 3;
            SET @ERROR_DESCRIPTION = 'INSUFFICIENT_STOCK';
            ROLLBACK TRANSACTION;
            RETURN;
        END

        -- Calculate total amount
        DECLARE @CALCULATED_AMOUNT DECIMAL(18, 2);
        SELECT @CALCULATED_AMOUNT = SUM(P.PRICE * D.QUANTITY) FROM @SALE_DETAILS D JOIN PRODUCT P ON D.ID_PRODUCT = P.ID_PRODUCT WHERE P.ID_USER = @ID_USER;

        -- Insert sale
        DECLARE @ID_SALE INT;
        INSERT INTO SALE (ID_USER, [DATE], AMOUNT)
        VALUES (@ID_USER, GETUTCDATE(), @CALCULATED_AMOUNT);
        SET @ID_SALE = SCOPE_IDENTITY();

        -- Insert sale details
        INSERT INTO SALE_DETAIL (ID_SALE, ID_PRODUCT, QUANTITY, UNIT_PRICE)
        SELECT @ID_SALE, D.ID_PRODUCT, D.QUANTITY, P.PRICE
        FROM @SALE_DETAILS D
        JOIN PRODUCT P ON D.ID_PRODUCT = P.ID_PRODUCT
        WHERE P.ID_USER = @ID_USER;

        -- Update product stock
        UPDATE P
        SET P.STOCK = P.STOCK - D.QUANTITY
        FROM PRODUCT P JOIN @SALE_DETAILS D ON P.ID_PRODUCT = D.ID_PRODUCT WHERE P.ID_USER = @ID_USER;

        -- Create related transaction
        DECLARE @DESCRIPTION_TEXT VARCHAR(200);
        SET @DESCRIPTION_TEXT = 'Sale id:' + CAST(@ID_SALE AS VARCHAR(20));

        EXEC SP_CREATE_TRANSACTION @ID_USER = @ID_USER, @TYPE = 'In', @AMOUNT = @CALCULATED_AMOUNT, @DESCRIPTION = @DESCRIPTION_TEXT, @ERROR_ID = @ERROR_ID OUTPUT, @ERROR_DESCRIPTION = @ERROR_DESCRIPTION OUTPUT;

        IF @ERROR_ID IS NOT NULL
        BEGIN
            ROLLBACK TRANSACTION;
            RETURN;
        END

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_DESCRIPTION = 'ERROR_SQL';
    END CATCH
END;
GO

CREATE TYPE SALE_DETAIL_TYPE AS TABLE
(
    ID_PRODUCT INT,
    QUANTITY INT
);

-- SPXXX : SP_GET_FINANCIAL_TOTAL_BY_DATE

CREATE PROCEDURE SP_GET_FINANCIAL_TOTAL_BY_DATE
@ID_USER INT,
@START_DATE DATETIME2,
@END_DATE DATETIME2,
@ERROR_ID INT OUTPUT,
@ERROR_DESCRIPTION (VARCHAR(MAX)) OUTPUT
AS BEGIN
	BEGIN TRY
		SET @ERROR_ID = NULL
		SET @ERROR_DESCRIPTION = NULL

		IF NOT EXISTS (SELECT 1 FROM [USER] WHERE ID_USER = @ID_USER)
		BEGIN 
			SET @ERROR_ID = 50002
			SET @ERROR_DESCRIPTION = 'USER_NOT_FOUND'
			RETURN;
		END

		IF @START_DATE > @END_DATE
		BEGIN 
			SET @ERROR_ID = 50001
			SET @ERROR_DESCRIPTION = 'NOT_VALID_DATES'
			RETURN;
		END

		SELECT 
    		SUM(CASE WHEN TYPE = 'In' THEN AMOUNT ELSE 0 END) AS TOTAL_INCOME,
    		SUM(CASE WHEN TYPE = 'Ex' THEN AMOUNT ELSE 0 END) AS TOTAL_EXPENSE
		FROM TRANSACTION
		WHERE ID_USER = @ID_USER AND DATE BETWEEN @START_DATE AND @END_DATE;

	END TRY 
	BEGIN CATCH
		SET @ERROR_ID = ERROR_NUMBER();
		SET @ERROR_DESCRIPTION = 'SQL_ERROR'
	END CATCH
END